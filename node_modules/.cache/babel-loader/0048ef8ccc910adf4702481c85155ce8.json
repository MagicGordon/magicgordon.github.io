{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchJson = void 0;\n\nconst http_errors_1 = __importDefault(require(\"http-errors\")); // TODO: Move into separate module and exclude node-fetch kludge from browser build\n\n\nlet fetch;\n\nif (typeof window === 'undefined' || window.name === 'nodejs') {\n  /* eslint-disable @typescript-eslint/no-var-requires */\n  const nodeFetch = require('node-fetch');\n\n  const http = require('http');\n\n  const https = require('https');\n  /* eslint-enable @typescript-eslint/no-var-requires */\n\n\n  const httpAgent = new http.Agent({\n    keepAlive: true\n  });\n  const httpsAgent = new https.Agent({\n    keepAlive: true\n  });\n\n  function agent(_parsedURL) {\n    if (_parsedURL.protocol === 'http:') {\n      return httpAgent;\n    } else {\n      return httpsAgent;\n    }\n  }\n\n  fetch = function (resource, init) {\n    return nodeFetch(resource, {\n      agent: agent(new URL(resource)),\n      ...init\n    });\n  };\n} else {\n  fetch = window.fetch;\n}\n\nasync function fetchJson(connection, json) {\n  let url = null;\n\n  if (typeof connection === 'string') {\n    url = connection;\n  } else {\n    url = connection.url;\n  }\n\n  const response = await fetch(url, {\n    method: json ? 'POST' : 'GET',\n    body: json ? json : undefined,\n    headers: {\n      'Content-type': 'application/json; charset=utf-8'\n    }\n  });\n\n  if (!response.ok) {\n    throw http_errors_1.default(response.status, await response.text());\n  }\n\n  return await response.json();\n}\n\nexports.fetchJson = fetchJson;","map":{"version":3,"sources":["/Users/Julie/near/digital-war/frontend/node_modules/near-api-js/lib/utils/web.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","fetchJson","http_errors_1","require","fetch","window","name","nodeFetch","http","https","httpAgent","Agent","keepAlive","httpsAgent","agent","_parsedURL","protocol","resource","init","URL","connection","json","url","response","method","body","undefined","headers","ok","default","status","text"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,aAAa,GAAGR,eAAe,CAACS,OAAO,CAAC,aAAD,CAAR,CAArC,C,CACA;;;AACA,IAAIC,KAAJ;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,IAAP,KAAgB,QAArD,EAA+D;AAC3D;AACA,QAAMC,SAAS,GAAGJ,OAAO,CAAC,YAAD,CAAzB;;AACA,QAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;AACA,QAAMM,KAAK,GAAGN,OAAO,CAAC,OAAD,CAArB;AACA;;;AACA,QAAMO,SAAS,GAAG,IAAIF,IAAI,CAACG,KAAT,CAAe;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAf,CAAlB;AACA,QAAMC,UAAU,GAAG,IAAIJ,KAAK,CAACE,KAAV,CAAgB;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAhB,CAAnB;;AACA,WAASE,KAAT,CAAeC,UAAf,EAA2B;AACvB,QAAIA,UAAU,CAACC,QAAX,KAAwB,OAA5B,EAAqC;AACjC,aAAON,SAAP;AACH,KAFD,MAGK;AACD,aAAOG,UAAP;AACH;AACJ;;AACDT,EAAAA,KAAK,GAAG,UAAUa,QAAV,EAAoBC,IAApB,EAA0B;AAC9B,WAAOX,SAAS,CAACU,QAAD,EAAW;AAAEH,MAAAA,KAAK,EAAEA,KAAK,CAAC,IAAIK,GAAJ,CAAQF,QAAR,CAAD,CAAd;AAAmC,SAAGC;AAAtC,KAAX,CAAhB;AACH,GAFD;AAGH,CAnBD,MAoBK;AACDd,EAAAA,KAAK,GAAGC,MAAM,CAACD,KAAf;AACH;;AACD,eAAeH,SAAf,CAAyBmB,UAAzB,EAAqCC,IAArC,EAA2C;AACvC,MAAIC,GAAG,GAAG,IAAV;;AACA,MAAI,OAAQF,UAAR,KAAwB,QAA5B,EAAsC;AAClCE,IAAAA,GAAG,GAAGF,UAAN;AACH,GAFD,MAGK;AACDE,IAAAA,GAAG,GAAGF,UAAU,CAACE,GAAjB;AACH;;AACD,QAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACkB,GAAD,EAAM;AAC9BE,IAAAA,MAAM,EAAEH,IAAI,GAAG,MAAH,GAAY,KADM;AAE9BI,IAAAA,IAAI,EAAEJ,IAAI,GAAGA,IAAH,GAAUK,SAFU;AAG9BC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHqB,GAAN,CAA5B;;AAKA,MAAI,CAACJ,QAAQ,CAACK,EAAd,EAAkB;AACd,UAAM1B,aAAa,CAAC2B,OAAd,CAAsBN,QAAQ,CAACO,MAA/B,EAAuC,MAAMP,QAAQ,CAACQ,IAAT,EAA7C,CAAN;AACH;;AACD,SAAO,MAAMR,QAAQ,CAACF,IAAT,EAAb;AACH;;AACDtB,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchJson = void 0;\nconst http_errors_1 = __importDefault(require(\"http-errors\"));\n// TODO: Move into separate module and exclude node-fetch kludge from browser build\nlet fetch;\nif (typeof window === 'undefined' || window.name === 'nodejs') {\n    /* eslint-disable @typescript-eslint/no-var-requires */\n    const nodeFetch = require('node-fetch');\n    const http = require('http');\n    const https = require('https');\n    /* eslint-enable @typescript-eslint/no-var-requires */\n    const httpAgent = new http.Agent({ keepAlive: true });\n    const httpsAgent = new https.Agent({ keepAlive: true });\n    function agent(_parsedURL) {\n        if (_parsedURL.protocol === 'http:') {\n            return httpAgent;\n        }\n        else {\n            return httpsAgent;\n        }\n    }\n    fetch = function (resource, init) {\n        return nodeFetch(resource, { agent: agent(new URL(resource)), ...init });\n    };\n}\nelse {\n    fetch = window.fetch;\n}\nasync function fetchJson(connection, json) {\n    let url = null;\n    if (typeof (connection) === 'string') {\n        url = connection;\n    }\n    else {\n        url = connection.url;\n    }\n    const response = await fetch(url, {\n        method: json ? 'POST' : 'GET',\n        body: json ? json : undefined,\n        headers: { 'Content-type': 'application/json; charset=utf-8' }\n    });\n    if (!response.ok) {\n        throw http_errors_1.default(response.status, await response.text());\n    }\n    return await response.json();\n}\nexports.fetchJson = fetchJson;\n"]},"metadata":{},"sourceType":"script"}