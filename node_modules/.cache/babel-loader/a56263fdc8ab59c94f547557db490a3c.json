{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.TypedError = void 0;\n\nconst depd_1 = __importDefault(require(\"depd\"));\n\nconst provider_1 = require(\"./provider\");\n\nconst web_1 = require(\"../utils/web\");\n\nconst errors_1 = require(\"../utils/errors\");\n\nObject.defineProperty(exports, \"TypedError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.TypedError;\n  }\n});\n\nconst serialize_1 = require(\"../utils/serialize\");\n\nconst rpc_errors_1 = require(\"../utils/rpc_errors\"); /// Keep ids unique across all connections.\n\n\nlet _nextId = 123;\n\nclass JsonRpcProvider extends provider_1.Provider {\n  constructor(url) {\n    super();\n    this.connection = {\n      url\n    };\n  }\n  /**\n   * Get the current network (ex. test, beta, etcâ€¦)\n   * @returns {Promise<Network>}\n   */\n\n\n  async getNetwork() {\n    return {\n      name: 'test',\n      chainId: 'test'\n    };\n  }\n  /**\n   * Gets the RPC's status\n   * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#status)\n   * @returns {Promise<NodeStatusResult>}\n   */\n\n\n  async status() {\n    return this.sendJsonRpc('status', []);\n  }\n  /**\n   * Sends a signed transaction to the RPC\n   * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#send-transaction-wait-until-done)\n   * @param signedTransaction The signed transaction being sent\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  async sendTransaction(signedTransaction) {\n    const bytes = signedTransaction.encode();\n    return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]).then(provider_1.adaptTransactionResult);\n  }\n  /**\n   * Gets a transaction's status from the RPC\n   * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#status)\n   * @param txHash The hash of the transaction\n   * @param accountId The NEAR account that signed the transaction\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  async txStatus(txHash, accountId) {\n    return this.sendJsonRpc('tx', [serialize_1.base_encode(txHash), accountId]).then(provider_1.adaptTransactionResult);\n  }\n  /**\n   * Query the RPC as [shown in the docs](https://docs.nearprotocol.com/docs/interaction/rpc#query)\n   * @param path Path parameter for the RPC (ex. \"contract/my_token\")\n   * @param data Data parameter (ex. \"\", \"AQ4\", or whatever is needed)\n   */\n\n\n  async query(path, data) {\n    const result = await this.sendJsonRpc('query', [path, data]);\n\n    if (result && result.error) {\n      throw new Error(`Querying ${path} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`);\n    }\n\n    return result;\n  }\n  /**\n   * Query for block info from the RPC\n   * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#block)\n   */\n\n\n  async block(blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    let {\n      blockId\n    } = blockQuery;\n\n    if (typeof blockQuery !== 'object') {\n      const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n      deprecate('use `block({ blockId })` or `block({ finality })` instead');\n      blockId = blockQuery;\n    }\n\n    return this.sendJsonRpc('block', {\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Queries for details of a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n   * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#chunk)\n   * @param chunkId Hash of a chunk ID or shard ID\n   * @returns {Promise<ChunkResult>}\n   */\n\n\n  async chunk(chunkId) {\n    return this.sendJsonRpc('chunk', [chunkId]);\n  }\n  /**\n   * Query validators of the epoch defined by given block id.\n   * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#validators)\n   * @param blockId Block hash or height, or null for latest.\n   */\n\n\n  async validators(blockId) {\n    return this.sendJsonRpc('validators', [blockId]);\n  }\n  /**\n   * Gets EXPERIMENTAL_genesis_config from RPC\n   * @returns {Promise<GenesisConfig>}\n   */\n\n\n  async experimental_genesisConfig() {\n    return await this.sendJsonRpc('EXPERIMENTAL_genesis_config', []);\n  }\n  /**\n   * Gets light_client_proof from RPC (https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n   * @returns {Promise<LightClientProof>}\n   * @deprecated Use `lightClientProof` instead\n   */\n\n\n  async experimental_lightClientProof(request) {\n    const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n    deprecate('use `lightClientProof` instead');\n    return await this.lightClientProof(request);\n  }\n  /**\n   * Gets light_client_proof from RPC (https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n   * @returns {Promise<LightClientProof>}\n   */\n\n\n  async lightClientProof(request) {\n    return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n  }\n  /**\n   * Directly call the RPC specifying the method and params\n   * @param method RPC method\n   * @param params Parameters to the method\n   */\n\n\n  async sendJsonRpc(method, params) {\n    const request = {\n      method,\n      params,\n      id: _nextId++,\n      jsonrpc: '2.0'\n    };\n    const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n\n    if (response.error) {\n      if (typeof response.error.data === 'object') {\n        if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n          // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n          throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n        } else {\n          throw rpc_errors_1.parseRpcError(response.error.data);\n        }\n      } else {\n        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`; // NOTE: All this hackery is happening because structured errors not implemented\n        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n\n        if (response.error.data === 'Timeout') {\n          throw new errors_1.TypedError('send_tx_commit has timed out.', 'TimeoutError');\n        } else {\n          throw new errors_1.TypedError(errorMessage);\n        }\n      }\n    }\n\n    return response.result;\n  }\n\n}\n\nexports.JsonRpcProvider = JsonRpcProvider;","map":{"version":3,"sources":["/Users/Julie/near/digital-war/frontend/node_modules/near-api-js/lib/providers/json-rpc-provider.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JsonRpcProvider","TypedError","depd_1","require","provider_1","web_1","errors_1","enumerable","get","serialize_1","rpc_errors_1","_nextId","Provider","constructor","url","connection","getNetwork","name","chainId","status","sendJsonRpc","sendTransaction","signedTransaction","bytes","encode","Buffer","from","toString","then","adaptTransactionResult","txStatus","txHash","accountId","base_encode","query","path","data","result","error","Error","JSON","stringify","block","blockQuery","finality","blockId","deprecate","default","block_id","chunk","chunkId","validators","experimental_genesisConfig","experimental_lightClientProof","request","lightClientProof","method","params","id","jsonrpc","response","fetchJson","error_message","error_type","parseRpcError","errorMessage","code","message"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcProvider = exports.TypedError = void 0;\nconst depd_1 = __importDefault(require(\"depd\"));\nconst provider_1 = require(\"./provider\");\nconst web_1 = require(\"../utils/web\");\nconst errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", { enumerable: true, get: function () { return errors_1.TypedError; } });\nconst serialize_1 = require(\"../utils/serialize\");\nconst rpc_errors_1 = require(\"../utils/rpc_errors\");\n/// Keep ids unique across all connections.\nlet _nextId = 123;\nclass JsonRpcProvider extends provider_1.Provider {\n    constructor(url) {\n        super();\n        this.connection = { url };\n    }\n    /**\n     * Get the current network (ex. test, beta, etcâ€¦)\n     * @returns {Promise<Network>}\n     */\n    async getNetwork() {\n        return {\n            name: 'test',\n            chainId: 'test'\n        };\n    }\n    /**\n     * Gets the RPC's status\n     * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#status)\n     * @returns {Promise<NodeStatusResult>}\n     */\n    async status() {\n        return this.sendJsonRpc('status', []);\n    }\n    /**\n     * Sends a signed transaction to the RPC\n     * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#send-transaction-wait-until-done)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async sendTransaction(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]).then(provider_1.adaptTransactionResult);\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#status)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async txStatus(txHash, accountId) {\n        return this.sendJsonRpc('tx', [serialize_1.base_encode(txHash), accountId]).then(provider_1.adaptTransactionResult);\n    }\n    /**\n     * Query the RPC as [shown in the docs](https://docs.nearprotocol.com/docs/interaction/rpc#query)\n     * @param path Path parameter for the RPC (ex. \"contract/my_token\")\n     * @param data Data parameter (ex. \"\", \"AQ4\", or whatever is needed)\n     */\n    async query(path, data) {\n        const result = await this.sendJsonRpc('query', [path, data]);\n        if (result && result.error) {\n            throw new Error(`Querying ${path} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`);\n        }\n        return result;\n    }\n    /**\n     * Query for block info from the RPC\n     * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#block)\n     */\n    async block(blockQuery) {\n        const { finality } = blockQuery;\n        let { blockId } = blockQuery;\n        if (typeof blockQuery !== 'object') {\n            const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n            deprecate('use `block({ blockId })` or `block({ finality })` instead');\n            blockId = blockQuery;\n        }\n        return this.sendJsonRpc('block', { block_id: blockId, finality });\n    }\n    /**\n     * Queries for details of a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#chunk)\n     * @param chunkId Hash of a chunk ID or shard ID\n     * @returns {Promise<ChunkResult>}\n     */\n    async chunk(chunkId) {\n        return this.sendJsonRpc('chunk', [chunkId]);\n    }\n    /**\n     * Query validators of the epoch defined by given block id.\n     * See [docs for more info](https://docs.nearprotocol.com/docs/interaction/rpc#validators)\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async validators(blockId) {\n        return this.sendJsonRpc('validators', [blockId]);\n    }\n    /**\n     * Gets EXPERIMENTAL_genesis_config from RPC\n     * @returns {Promise<GenesisConfig>}\n     */\n    async experimental_genesisConfig() {\n        return await this.sendJsonRpc('EXPERIMENTAL_genesis_config', []);\n    }\n    /**\n     * Gets light_client_proof from RPC (https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n     * @returns {Promise<LightClientProof>}\n     * @deprecated Use `lightClientProof` instead\n     */\n    async experimental_lightClientProof(request) {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n        deprecate('use `lightClientProof` instead');\n        return await this.lightClientProof(request);\n    }\n    /**\n     * Gets light_client_proof from RPC (https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n     * @returns {Promise<LightClientProof>}\n     */\n    async lightClientProof(request) {\n        return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    async sendJsonRpc(method, params) {\n        const request = {\n            method,\n            params,\n            id: (_nextId++),\n            jsonrpc: '2.0'\n        };\n        const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n        if (response.error) {\n            if (typeof response.error.data === 'object') {\n                if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                    // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                    throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                }\n                else {\n                    throw rpc_errors_1.parseRpcError(response.error.data);\n                }\n            }\n            else {\n                const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                // NOTE: All this hackery is happening because structured errors not implemented\n                // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                if (response.error.data === 'Timeout') {\n                    throw new errors_1.TypedError('send_tx_commit has timed out.', 'TimeoutError');\n                }\n                else {\n                    throw new errors_1.TypedError(errorMessage);\n                }\n            }\n        }\n        return response.result;\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n"]},"metadata":{},"sourceType":"script"}