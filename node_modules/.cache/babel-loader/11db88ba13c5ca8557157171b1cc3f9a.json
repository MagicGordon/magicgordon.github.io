{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnencryptedFileSystemKeyStore = exports.readKeyFile = exports.loadJsonFile = void 0;\n\nconst fs_1 = __importDefault(require(\"fs\"));\n\nconst util_1 = require(\"util\");\n\nconst key_pair_1 = require(\"../utils/key_pair\");\n\nconst keystore_1 = require(\"./keystore\");\n\nconst promisify = fn => {\n  if (!fn) {\n    return () => {\n      throw new Error('Trying to use unimplemented function. `fs` module not available in web build?');\n    };\n  }\n\n  return util_1.promisify(fn);\n};\n\nconst exists = promisify(fs_1.default.exists);\nconst readFile = promisify(fs_1.default.readFile);\nconst writeFile = promisify(fs_1.default.writeFile);\nconst unlink = promisify(fs_1.default.unlink);\nconst readdir = promisify(fs_1.default.readdir);\nconst mkdir = promisify(fs_1.default.mkdir);\n\nasync function loadJsonFile(path) {\n  const content = await readFile(path);\n  return JSON.parse(content.toString());\n}\n\nexports.loadJsonFile = loadJsonFile;\n\nasync function ensureDir(path) {\n  try {\n    await mkdir(path, {\n      recursive: true\n    });\n  } catch (err) {\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n}\n\nasync function readKeyFile(path) {\n  const accountInfo = await loadJsonFile(path); // The private key might be in private_key or secret_key field.\n\n  let privateKey = accountInfo.private_key;\n\n  if (!privateKey && accountInfo.secret_key) {\n    privateKey = accountInfo.secret_key;\n  }\n\n  return [accountInfo.account_id, key_pair_1.KeyPair.fromString(privateKey)];\n}\n\nexports.readKeyFile = readKeyFile;\n\nclass UnencryptedFileSystemKeyStore extends keystore_1.KeyStore {\n  constructor(keyDir) {\n    super();\n    this.keyDir = keyDir;\n  }\n  /**\n   * Sets a storage item in a file, unencrypted\n   * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n\n\n  async setKey(networkId, accountId, keyPair) {\n    await ensureDir(`${this.keyDir}/${networkId}`);\n    const content = {\n      account_id: accountId,\n      public_key: keyPair.getPublicKey().toString(),\n      private_key: keyPair.toString()\n    };\n    await writeFile(this.getKeyFilePath(networkId, accountId), JSON.stringify(content));\n  }\n  /**\n   * Gets a key from local storage\n   * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @returns {Promise<KeyPair>}\n   */\n\n\n  async getKey(networkId, accountId) {\n    // Find key / account id.\n    if (!(await exists(this.getKeyFilePath(networkId, accountId)))) {\n      return null;\n    }\n\n    const accountKeyPair = await readKeyFile(this.getKeyFilePath(networkId, accountId));\n    return accountKeyPair[1];\n  }\n  /**\n   * Removes a key from local storage\n   * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   */\n\n\n  async removeKey(networkId, accountId) {\n    if (await exists(this.getKeyFilePath(networkId, accountId))) {\n      await unlink(this.getKeyFilePath(networkId, accountId));\n    }\n  }\n  /**\n   * Removes all items from local storage\n   */\n\n\n  async clear() {\n    for (const network of await this.getNetworks()) {\n      for (const account of await this.getAccounts(network)) {\n        await this.removeKey(network, account);\n      }\n    }\n  }\n\n  getKeyFilePath(networkId, accountId) {\n    return `${this.keyDir}/${networkId}/${accountId}.json`;\n  }\n  /**\n   * Get the network(s) from local storage\n   * @returns {Promise<string[]>}\n   */\n\n\n  async getNetworks() {\n    const files = await readdir(this.keyDir);\n    const result = new Array();\n    files.forEach(item => {\n      result.push(item);\n    });\n    return result;\n  }\n  /**\n   * Gets the account(s) from local storage\n   * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n   * @returns{Promise<string[]>}\n   */\n\n\n  async getAccounts(networkId) {\n    if (!(await exists(`${this.keyDir}/${networkId}`))) {\n      return [];\n    }\n\n    const files = await readdir(`${this.keyDir}/${networkId}`);\n    return files.filter(file => file.endsWith('.json')).map(file => file.replace(/.json$/, ''));\n  }\n\n}\n\nexports.UnencryptedFileSystemKeyStore = UnencryptedFileSystemKeyStore;","map":{"version":3,"sources":["/Users/Julie/near/digital-war/frontend/node_modules/near-api-js/lib/key_stores/unencrypted_file_system_keystore.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","UnencryptedFileSystemKeyStore","readKeyFile","loadJsonFile","fs_1","require","util_1","key_pair_1","keystore_1","promisify","fn","Error","exists","default","readFile","writeFile","unlink","readdir","mkdir","path","content","JSON","parse","toString","ensureDir","recursive","err","code","accountInfo","privateKey","private_key","secret_key","account_id","KeyPair","fromString","KeyStore","constructor","keyDir","setKey","networkId","accountId","keyPair","public_key","getPublicKey","getKeyFilePath","stringify","getKey","accountKeyPair","removeKey","clear","network","getNetworks","account","getAccounts","files","result","Array","forEach","item","push","filter","file","endsWith","map","replace"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnencryptedFileSystemKeyStore = exports.readKeyFile = exports.loadJsonFile = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst util_1 = require(\"util\");\nconst key_pair_1 = require(\"../utils/key_pair\");\nconst keystore_1 = require(\"./keystore\");\nconst promisify = (fn) => {\n    if (!fn) {\n        return () => {\n            throw new Error('Trying to use unimplemented function. `fs` module not available in web build?');\n        };\n    }\n    return util_1.promisify(fn);\n};\nconst exists = promisify(fs_1.default.exists);\nconst readFile = promisify(fs_1.default.readFile);\nconst writeFile = promisify(fs_1.default.writeFile);\nconst unlink = promisify(fs_1.default.unlink);\nconst readdir = promisify(fs_1.default.readdir);\nconst mkdir = promisify(fs_1.default.mkdir);\nasync function loadJsonFile(path) {\n    const content = await readFile(path);\n    return JSON.parse(content.toString());\n}\nexports.loadJsonFile = loadJsonFile;\nasync function ensureDir(path) {\n    try {\n        await mkdir(path, { recursive: true });\n    }\n    catch (err) {\n        if (err.code !== 'EEXIST') {\n            throw err;\n        }\n    }\n}\nasync function readKeyFile(path) {\n    const accountInfo = await loadJsonFile(path);\n    // The private key might be in private_key or secret_key field.\n    let privateKey = accountInfo.private_key;\n    if (!privateKey && accountInfo.secret_key) {\n        privateKey = accountInfo.secret_key;\n    }\n    return [accountInfo.account_id, key_pair_1.KeyPair.fromString(privateKey)];\n}\nexports.readKeyFile = readKeyFile;\nclass UnencryptedFileSystemKeyStore extends keystore_1.KeyStore {\n    constructor(keyDir) {\n        super();\n        this.keyDir = keyDir;\n    }\n    /**\n     * Sets a storage item in a file, unencrypted\n     * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        await ensureDir(`${this.keyDir}/${networkId}`);\n        const content = { account_id: accountId, public_key: keyPair.getPublicKey().toString(), private_key: keyPair.toString() };\n        await writeFile(this.getKeyFilePath(networkId, accountId), JSON.stringify(content));\n    }\n    /**\n     * Gets a key from local storage\n     * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        // Find key / account id.\n        if (!await exists(this.getKeyFilePath(networkId, accountId))) {\n            return null;\n        }\n        const accountKeyPair = await readKeyFile(this.getKeyFilePath(networkId, accountId));\n        return accountKeyPair[1];\n    }\n    /**\n     * Removes a key from local storage\n     * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        if (await exists(this.getKeyFilePath(networkId, accountId))) {\n            await unlink(this.getKeyFilePath(networkId, accountId));\n        }\n    }\n    /**\n     * Removes all items from local storage\n     */\n    async clear() {\n        for (const network of await this.getNetworks()) {\n            for (const account of await this.getAccounts(network)) {\n                await this.removeKey(network, account);\n            }\n        }\n    }\n    getKeyFilePath(networkId, accountId) {\n        return `${this.keyDir}/${networkId}/${accountId}.json`;\n    }\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const files = await readdir(this.keyDir);\n        const result = new Array();\n        files.forEach((item) => {\n            result.push(item);\n        });\n        return result;\n    }\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        if (!await exists(`${this.keyDir}/${networkId}`)) {\n            return [];\n        }\n        const files = await readdir(`${this.keyDir}/${networkId}`);\n        return files\n            .filter(file => file.endsWith('.json'))\n            .map(file => file.replace(/.json$/, ''));\n    }\n}\nexports.UnencryptedFileSystemKeyStore = UnencryptedFileSystemKeyStore;\n"]},"metadata":{},"sourceType":"script"}