{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connect = exports.Near = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst account_1 = require(\"./account\");\n\nconst connection_1 = require(\"./connection\");\n\nconst contract_1 = require(\"./contract\");\n\nconst unencrypted_file_system_keystore_1 = require(\"./key_stores/unencrypted_file_system_keystore\");\n\nconst account_creator_1 = require(\"./account_creator\");\n\nconst key_stores_1 = require(\"./key_stores\");\n\nclass Near {\n  constructor(config) {\n    this.config = config;\n    this.connection = connection_1.Connection.fromConfig({\n      networkId: config.networkId,\n      provider: {\n        type: 'JsonRpcProvider',\n        args: {\n          url: config.nodeUrl\n        }\n      },\n      signer: config.signer || {\n        type: 'InMemorySigner',\n        keyStore: config.keyStore || config.deps.keyStore\n      }\n    });\n\n    if (config.masterAccount) {\n      // TODO: figure out better way of specifiying initial balance.\n      // Hardcoded number below must be enough to pay the gas cost to dev-deploy with near-shell for multiple times\n      const initialBalance = config.initialBalance ? new bn_js_1.default(config.initialBalance) : new bn_js_1.default('500000000000000000000000000');\n      this.accountCreator = new account_creator_1.LocalAccountCreator(new account_1.Account(this.connection, config.masterAccount), initialBalance);\n    } else if (config.helperUrl) {\n      this.accountCreator = new account_creator_1.UrlAccountCreator(this.connection, config.helperUrl);\n    } else {\n      this.accountCreator = null;\n    }\n  }\n  /**\n   *\n   * @param accountId near accountId used to interact with the network.\n   */\n\n\n  async account(accountId) {\n    const account = new account_1.Account(this.connection, accountId);\n    await account.state();\n    return account;\n  }\n  /**\n   *\n   * @param accountId\n   * @param publicKey\n   */\n\n\n  async createAccount(accountId, publicKey) {\n    if (!this.accountCreator) {\n      throw new Error('Must specify account creator, either via masterAccount or helperUrl configuration settings.');\n    }\n\n    await this.accountCreator.createAccount(accountId, publicKey);\n    return new account_1.Account(this.connection, accountId);\n  }\n  /**\n   * @deprecated Use `new nearApi.Contract(yourAccount, contractId, { viewMethods, changeMethods })` instead.\n   * @param contractId\n   * @param options\n   */\n\n\n  async loadContract(contractId, options) {\n    const account = new account_1.Account(this.connection, options.sender);\n    return new contract_1.Contract(account, contractId, options);\n  }\n  /**\n   * @deprecated Use `yourAccount.sendMoney` instead.\n   * @param amount\n   * @param originator\n   * @param receiver\n   */\n\n\n  async sendTokens(amount, originator, receiver) {\n    console.warn('near.sendTokens is deprecated. Use `yourAccount.sendMoney` instead.');\n    const account = new account_1.Account(this.connection, originator);\n    const result = await account.sendMoney(receiver, amount);\n    return result.transaction_outcome.id;\n  }\n\n}\n\nexports.Near = Near;\n/**\n * Initialize connection to Near network.\n */\n\nasync function connect(config) {\n  // Try to find extra key in `KeyPath` if provided.\n  if (config.keyPath && config.deps && config.deps.keyStore) {\n    try {\n      const accountKeyFile = await unencrypted_file_system_keystore_1.readKeyFile(config.keyPath);\n\n      if (accountKeyFile[0]) {\n        // TODO: Only load key if network ID matches\n        const keyPair = accountKeyFile[1];\n        const keyPathStore = new key_stores_1.InMemoryKeyStore();\n        await keyPathStore.setKey(config.networkId, accountKeyFile[0], keyPair);\n\n        if (!config.masterAccount) {\n          config.masterAccount = accountKeyFile[0];\n        }\n\n        config.deps.keyStore = new key_stores_1.MergeKeyStore([config.deps.keyStore, keyPathStore]);\n        console.log(`Loaded master account ${accountKeyFile[0]} key from ${config.keyPath} with public key = ${keyPair.getPublicKey()}`);\n      }\n    } catch (error) {\n      console.warn(`Failed to load master account key from ${config.keyPath}: ${error}`);\n    }\n  }\n\n  return new Near(config);\n}\n\nexports.connect = connect;","map":{"version":3,"sources":["/Users/Julie/near/digital-war/frontend/node_modules/near-api-js/lib/near.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","connect","Near","bn_js_1","require","account_1","connection_1","contract_1","unencrypted_file_system_keystore_1","account_creator_1","key_stores_1","constructor","config","connection","Connection","fromConfig","networkId","provider","type","args","url","nodeUrl","signer","keyStore","deps","masterAccount","initialBalance","default","accountCreator","LocalAccountCreator","Account","helperUrl","UrlAccountCreator","account","accountId","state","createAccount","publicKey","Error","loadContract","contractId","options","sender","Contract","sendTokens","amount","originator","receiver","console","warn","result","sendMoney","transaction_outcome","id","keyPath","accountKeyFile","readKeyFile","keyPair","keyPathStore","InMemoryKeyStore","setKey","MergeKeyStore","log","getPublicKey","error"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.connect = exports.Near = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst account_1 = require(\"./account\");\nconst connection_1 = require(\"./connection\");\nconst contract_1 = require(\"./contract\");\nconst unencrypted_file_system_keystore_1 = require(\"./key_stores/unencrypted_file_system_keystore\");\nconst account_creator_1 = require(\"./account_creator\");\nconst key_stores_1 = require(\"./key_stores\");\nclass Near {\n    constructor(config) {\n        this.config = config;\n        this.connection = connection_1.Connection.fromConfig({\n            networkId: config.networkId,\n            provider: { type: 'JsonRpcProvider', args: { url: config.nodeUrl } },\n            signer: config.signer || { type: 'InMemorySigner', keyStore: config.keyStore || config.deps.keyStore }\n        });\n        if (config.masterAccount) {\n            // TODO: figure out better way of specifiying initial balance.\n            // Hardcoded number below must be enough to pay the gas cost to dev-deploy with near-shell for multiple times\n            const initialBalance = config.initialBalance ? new bn_js_1.default(config.initialBalance) : new bn_js_1.default('500000000000000000000000000');\n            this.accountCreator = new account_creator_1.LocalAccountCreator(new account_1.Account(this.connection, config.masterAccount), initialBalance);\n        }\n        else if (config.helperUrl) {\n            this.accountCreator = new account_creator_1.UrlAccountCreator(this.connection, config.helperUrl);\n        }\n        else {\n            this.accountCreator = null;\n        }\n    }\n    /**\n     *\n     * @param accountId near accountId used to interact with the network.\n     */\n    async account(accountId) {\n        const account = new account_1.Account(this.connection, accountId);\n        await account.state();\n        return account;\n    }\n    /**\n     *\n     * @param accountId\n     * @param publicKey\n     */\n    async createAccount(accountId, publicKey) {\n        if (!this.accountCreator) {\n            throw new Error('Must specify account creator, either via masterAccount or helperUrl configuration settings.');\n        }\n        await this.accountCreator.createAccount(accountId, publicKey);\n        return new account_1.Account(this.connection, accountId);\n    }\n    /**\n     * @deprecated Use `new nearApi.Contract(yourAccount, contractId, { viewMethods, changeMethods })` instead.\n     * @param contractId\n     * @param options\n     */\n    async loadContract(contractId, options) {\n        const account = new account_1.Account(this.connection, options.sender);\n        return new contract_1.Contract(account, contractId, options);\n    }\n    /**\n     * @deprecated Use `yourAccount.sendMoney` instead.\n     * @param amount\n     * @param originator\n     * @param receiver\n     */\n    async sendTokens(amount, originator, receiver) {\n        console.warn('near.sendTokens is deprecated. Use `yourAccount.sendMoney` instead.');\n        const account = new account_1.Account(this.connection, originator);\n        const result = await account.sendMoney(receiver, amount);\n        return result.transaction_outcome.id;\n    }\n}\nexports.Near = Near;\n/**\n * Initialize connection to Near network.\n */\nasync function connect(config) {\n    // Try to find extra key in `KeyPath` if provided.\n    if (config.keyPath && config.deps && config.deps.keyStore) {\n        try {\n            const accountKeyFile = await unencrypted_file_system_keystore_1.readKeyFile(config.keyPath);\n            if (accountKeyFile[0]) {\n                // TODO: Only load key if network ID matches\n                const keyPair = accountKeyFile[1];\n                const keyPathStore = new key_stores_1.InMemoryKeyStore();\n                await keyPathStore.setKey(config.networkId, accountKeyFile[0], keyPair);\n                if (!config.masterAccount) {\n                    config.masterAccount = accountKeyFile[0];\n                }\n                config.deps.keyStore = new key_stores_1.MergeKeyStore([config.deps.keyStore, keyPathStore]);\n                console.log(`Loaded master account ${accountKeyFile[0]} key from ${config.keyPath} with public key = ${keyPair.getPublicKey()}`);\n            }\n        }\n        catch (error) {\n            console.warn(`Failed to load master account key from ${config.keyPath}: ${error}`);\n        }\n    }\n    return new Near(config);\n}\nexports.connect = connect;\n"]},"metadata":{},"sourceType":"script"}