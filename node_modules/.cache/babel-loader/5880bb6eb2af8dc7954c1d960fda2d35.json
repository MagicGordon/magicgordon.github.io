{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemorySigner = exports.Signer = void 0;\n\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\n\nconst key_pair_1 = require(\"./utils/key_pair\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\n\n\nclass Signer {}\n\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\n\nclass InMemorySigner extends Signer {\n  constructor(keyStore) {\n    super();\n    this.keyStore = keyStore;\n  }\n  /**\n   * Creates a public key for the account given\n   * @param accountId The NEAR account to assign a public key to\n   * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n   * @returns {Promise<PublicKey>}\n   */\n\n\n  async createKey(accountId, networkId) {\n    const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n    await this.keyStore.setKey(networkId, accountId, keyPair);\n    return keyPair.getPublicKey();\n  }\n  /**\n   * Gets the existing public key for a given account\n   * @param accountId The NEAR account to assign a public key to\n   * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n   * @returns {Promise<PublicKey>} Returns the public key or null if not found\n   */\n\n\n  async getPublicKey(accountId, networkId) {\n    const keyPair = await this.keyStore.getKey(networkId, accountId);\n\n    if (keyPair === null) {\n      return null;\n    }\n\n    return keyPair.getPublicKey();\n  }\n  /**\n   * @param message A message to be signed, typically a serialized transaction\n   * @param accountId the NEAR account signing the message\n   * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n   * @returns {Promise<Signature>}\n   */\n\n\n  async signMessage(message, accountId, networkId) {\n    const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n\n    if (!accountId) {\n      throw new Error('InMemorySigner requires provided account id');\n    }\n\n    const keyPair = await this.keyStore.getKey(networkId, accountId);\n\n    if (keyPair === null) {\n      throw new Error(`Key for ${accountId} not found in ${networkId}`);\n    }\n\n    return keyPair.sign(hash);\n  }\n\n}\n\nexports.InMemorySigner = InMemorySigner;","map":{"version":3,"sources":["/Users/Julie/near/digital-war/frontend/node_modules/near-api-js/lib/signer.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","InMemorySigner","Signer","js_sha256_1","require","key_pair_1","constructor","keyStore","createKey","accountId","networkId","keyPair","KeyPair","fromRandom","setKey","getPublicKey","getKey","signMessage","message","hash","Uint8Array","default","sha256","array","Error","sign"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,MAAR,GAAiB,KAAK,CAA/C;;AACA,MAAMC,WAAW,GAAGT,eAAe,CAACU,OAAO,CAAC,WAAD,CAAR,CAAnC;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,kBAAD,CAA1B;AACA;AACA;AACA;;;AACA,MAAMF,MAAN,CAAa;;AAEbH,OAAO,CAACG,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;;AACA,MAAMD,cAAN,SAA6BC,MAA7B,CAAoC;AAChCI,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACmB,QAATC,SAAS,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAClC,UAAMC,OAAO,GAAGN,UAAU,CAACO,OAAX,CAAmBC,UAAnB,CAA8B,SAA9B,CAAhB;AACA,UAAM,KAAKN,QAAL,CAAcO,MAAd,CAAqBJ,SAArB,EAAgCD,SAAhC,EAA2CE,OAA3C,CAAN;AACA,WAAOA,OAAO,CAACI,YAAR,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACsB,QAAZA,YAAY,CAACN,SAAD,EAAYC,SAAZ,EAAuB;AACrC,UAAMC,OAAO,GAAG,MAAM,KAAKJ,QAAL,CAAcS,MAAd,CAAqBN,SAArB,EAAgCD,SAAhC,CAAtB;;AACA,QAAIE,OAAO,KAAK,IAAhB,EAAsB;AAClB,aAAO,IAAP;AACH;;AACD,WAAOA,OAAO,CAACI,YAAR,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACqB,QAAXE,WAAW,CAACC,OAAD,EAAUT,SAAV,EAAqBC,SAArB,EAAgC;AAC7C,UAAMS,IAAI,GAAG,IAAIC,UAAJ,CAAejB,WAAW,CAACkB,OAAZ,CAAoBC,MAApB,CAA2BC,KAA3B,CAAiCL,OAAjC,CAAf,CAAb;;AACA,QAAI,CAACT,SAAL,EAAgB;AACZ,YAAM,IAAIe,KAAJ,CAAU,6CAAV,CAAN;AACH;;AACD,UAAMb,OAAO,GAAG,MAAM,KAAKJ,QAAL,CAAcS,MAAd,CAAqBN,SAArB,EAAgCD,SAAhC,CAAtB;;AACA,QAAIE,OAAO,KAAK,IAAhB,EAAsB;AAClB,YAAM,IAAIa,KAAJ,CAAW,WAAUf,SAAU,iBAAgBC,SAAU,EAAzD,CAAN;AACH;;AACD,WAAOC,OAAO,CAACc,IAAR,CAAaN,IAAb,CAAP;AACH;;AA7C+B;;AA+CpCpB,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemorySigner = exports.Signer = void 0;\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {\n}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n    constructor(keyStore) {\n        super();\n        this.keyStore = keyStore;\n    }\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */\n    async createKey(accountId, networkId) {\n        const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n        await this.keyStore.setKey(networkId, accountId, keyPair);\n        return keyPair.getPublicKey();\n    }\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */\n    async getPublicKey(accountId, networkId) {\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            return null;\n        }\n        return keyPair.getPublicKey();\n    }\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, devnet, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */\n    async signMessage(message, accountId, networkId) {\n        const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n        if (!accountId) {\n            throw new Error('InMemorySigner requires provided account id');\n        }\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            throw new Error(`Key for ${accountId} not found in ${networkId}`);\n        }\n        return keyPair.sign(hash);\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n"]},"metadata":{},"sourceType":"script"}