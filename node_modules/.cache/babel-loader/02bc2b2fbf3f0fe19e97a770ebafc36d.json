{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Contract = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst providers_1 = require(\"./providers\");\n\nconst errors_1 = require(\"./utils/errors\"); // Makes `function.name` return given name\n\n\nfunction nameFunction(name, body) {\n  return {\n    [name](...args) {\n      return body(...args);\n    }\n\n  }[name];\n}\n/**\n * Defines a smart contract on NEAR including the mutable and non-mutable methods\n */\n\n\nclass Contract {\n  constructor(account, contractId, options) {\n    this.account = account;\n    this.contractId = contractId;\n    const {\n      viewMethods = [],\n      changeMethods = []\n    } = options;\n    viewMethods.forEach(methodName => {\n      Object.defineProperty(this, methodName, {\n        writable: false,\n        enumerable: true,\n        value: nameFunction(methodName, async (args = {}, ...ignored) => {\n          if (ignored.length || Object.prototype.toString.call(args) !== '[object Object]') {\n            throw new errors_1.PositionalArgsError();\n          }\n\n          return this.account.viewFunction(this.contractId, methodName, args);\n        })\n      });\n    });\n    changeMethods.forEach(methodName => {\n      Object.defineProperty(this, methodName, {\n        writable: false,\n        enumerable: true,\n        value: nameFunction(methodName, async (args = {}, gas, amount, ...ignored) => {\n          if (ignored.length || Object.prototype.toString.call(args) !== '[object Object]') {\n            throw new errors_1.PositionalArgsError();\n          }\n\n          validateBNLike({\n            gas,\n            amount\n          });\n          const rawResult = await this.account.functionCall(this.contractId, methodName, args, gas, amount);\n          return providers_1.getTransactionLastResult(rawResult);\n        })\n      });\n    });\n  }\n\n}\n\nexports.Contract = Contract;\n/**\n * Validation on arguments being a big number from bn.js\n * Throws if an argument is not in BN format or otherwise invalid\n * @param argMap\n */\n\nfunction validateBNLike(argMap) {\n  const bnLike = 'number, decimal string or BN';\n\n  for (const argName of Object.keys(argMap)) {\n    const argValue = argMap[argName];\n\n    if (argValue && !bn_js_1.default.isBN(argValue) && isNaN(argValue)) {\n      throw new errors_1.ArgumentTypeError(argName, bnLike, argValue);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/Julie/near/digital-war/frontend/node_modules/near-api-js/lib/contract.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Contract","bn_js_1","require","providers_1","errors_1","nameFunction","name","body","args","constructor","account","contractId","options","viewMethods","changeMethods","forEach","methodName","writable","enumerable","ignored","length","prototype","toString","call","PositionalArgsError","viewFunction","gas","amount","validateBNLike","rawResult","functionCall","getTransactionLastResult","argMap","bnLike","argName","keys","argValue","default","isBN","isNaN","ArgumentTypeError"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Contract = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst providers_1 = require(\"./providers\");\nconst errors_1 = require(\"./utils/errors\");\n// Makes `function.name` return given name\nfunction nameFunction(name, body) {\n    return {\n        [name](...args) {\n            return body(...args);\n        }\n    }[name];\n}\n/**\n * Defines a smart contract on NEAR including the mutable and non-mutable methods\n */\nclass Contract {\n    constructor(account, contractId, options) {\n        this.account = account;\n        this.contractId = contractId;\n        const { viewMethods = [], changeMethods = [] } = options;\n        viewMethods.forEach((methodName) => {\n            Object.defineProperty(this, methodName, {\n                writable: false,\n                enumerable: true,\n                value: nameFunction(methodName, async (args = {}, ...ignored) => {\n                    if (ignored.length || Object.prototype.toString.call(args) !== '[object Object]') {\n                        throw new errors_1.PositionalArgsError();\n                    }\n                    return this.account.viewFunction(this.contractId, methodName, args);\n                })\n            });\n        });\n        changeMethods.forEach((methodName) => {\n            Object.defineProperty(this, methodName, {\n                writable: false,\n                enumerable: true,\n                value: nameFunction(methodName, async (args = {}, gas, amount, ...ignored) => {\n                    if (ignored.length || Object.prototype.toString.call(args) !== '[object Object]') {\n                        throw new errors_1.PositionalArgsError();\n                    }\n                    validateBNLike({ gas, amount });\n                    const rawResult = await this.account.functionCall(this.contractId, methodName, args, gas, amount);\n                    return providers_1.getTransactionLastResult(rawResult);\n                })\n            });\n        });\n    }\n}\nexports.Contract = Contract;\n/**\n * Validation on arguments being a big number from bn.js\n * Throws if an argument is not in BN format or otherwise invalid\n * @param argMap\n */\nfunction validateBNLike(argMap) {\n    const bnLike = 'number, decimal string or BN';\n    for (const argName of Object.keys(argMap)) {\n        const argValue = argMap[argName];\n        if (argValue && !bn_js_1.default.isBN(argValue) && isNaN(argValue)) {\n            throw new errors_1.ArgumentTypeError(argName, bnLike, argValue);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}